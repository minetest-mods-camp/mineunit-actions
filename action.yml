name: Mineunit runner
description: "Execute unit tests with mineunit, busted & luacov"
author: SX / S-S-X
branding:
  icon: file-text
  color: green

inputs:
  working-directory:
    description: "Working directory for unit tests"
    required: true
    default: "."
  badge-name:
    description: "Code coverage badge name"
    required: true
    default: "coverage"
  badge-label:
    description: "Code coverage badge label"
    required: true
    default: "Test coverage"
  badge-color:
    description: "Code coverage badge color"
    required: true
    default: "99CC09"
  badge-service:
    description: "Badge service base URL"
    required: true
    default: "https://mineunit-badges.000webhostapp.com/${{ github.repository }}"
  production-branch:
    description: "Production branch is what is used for badge generation"
    required: true
    default: master
  mineunit-version:
    description: "Mineunit version"
    required: false

outputs:
  # Generated or supplied badge properties
  badge-url:
    description: "Code coverage badge URL"
    value: "${{ inputs.badge-service }}/${{ inputs.badge-name }}"
  badge-status:
    description: "Code coverage badge status"
    value: "${{ steps.mineunit-coverage.outputs.total }} in ${{ steps.mineunit-coverage.outputs.files }} files"

  # Mineunit test framework output
  mineunit-stdout:
    description: "Stdout produced during busted run"
    value: ${{ steps.mineunit-tests.outputs.stdout }}
  mineunit-spec-missing:
    description: "Set to true if no spec files found for busted"
    value: ${{ steps.mineunit-tests.outputs.spec-missing }}

  mineunit-report:
    description: "Mineunit detailed test report"
    value: ${{ steps.mineunit-report.outputs.report }}

  coverage-total:
    description: "Total test coverage percentage"
    value: ${{ steps.mineunit-coverage.outputs.total }}
  coverage-files:
    description: "Number of files tested and total number of source files"
    value: ${{ steps.mineunit-coverage.outputs.files }}

  # Help content / on demand documentation
  help-busted-spec-missing:
    description: "Help for situation where spec files could not be loaded"
    value: |
      #### It seems your project is missing spec files, you should add some spec files to spec directory.
      If you already have spec directory with `*_spec.lua` files then problem is probably `working-directory` settings.
      `working-directory` should point to directory where `spec` directory is located.
      
      Example when you have tests in `/src/mystuff/spec` directory:
      ```
      - uses: mt-mods/mineunit-actions@master
        with:
          working-directory: ./src/mystuff
      ```

runs:
  using: composite
  steps:
    - name: busted install
      shell: bash
      run: |
        sudo apt-get install -y luarocks > /dev/null
        luarocks install --local busted > /dev/null
        luarocks install --local cluacov > /dev/null
    - name: mineunit install
      shell: bash
      run: |
        luarocks install --server=https://luarocks.org/dev  --local mineunit ${{ inputs.mineunit-version }}
    - id: mineunit-tests
      name: mineunit runner
      working-directory: "${{ inputs.working-directory }}"
      shell: bash
      run: |
        set +eo pipefail
        exec 3>&1
        OUT="$($HOME/.luarocks/bin/mineunit -c | tee >(cat - >&3); exit ${PIPESTATUS[0]})"
        ERR=$?
        exec 3>&-
        grep_eronly=(grep '0 successes / 0 failures / [1-9] error.\? / 0 pending')
        grep_nospec=(grep 'No test files found')
        ("${grep_eronly[@]}"<<<"$OUT" && "${grep_nospec[@]}"<<<"$OUT")&>/dev/null && echo "::set-output name=spec-missing::true"
        OUT="$(sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g'<<<"$OUT")"
        OUT="${OUT//'%'/'%25'}";OUT="${OUT//$'\n'/'%0A'}"
        echo "::set-output name=stdout::${OUT//$'\r'/'%0D'}"
        exit $ERR
    - id: mineunit-report
      name: mineunit coverage report
      working-directory: "${{ inputs.working-directory }}"
      shell: bash
      run: |
        $HOME/.luarocks/bin/mineunit -r
        OUT="$(awk -v p=0 '/^----/{p++;next}p==2{exit}p' luacov.report.out)"
        OUT="${OUT//'%'/'%25'}";OUT="${OUT//$'\n'/'%0A'}"
        echo "::set-output name=report::${OUT//$'\r'/'%0D'}"
    - id: mineunit-coverage
      name: collect coverage data
      working-directory: "${{ inputs.working-directory }}"
      shell: bash
      run: |
        echo "::set-output name=total::$(tail -n 2 luacov.report.out | grep ^Total | grep -o '[0-9.]\+%$')"
        awk -v p=0 '/^----/{p++;next}p==2{exit}p' luacov.report.out | sort -hrk4 > luacov.report.sum
        echo "::set-output name=files::$(grep -cv '\s0\.00%' luacov.report.sum)/$(wc -l<luacov.report.sum)"
    - name: generate badge
      shell: bash
      run: |
        echo "only-if: [[ '${{ github.event_name }}' == 'push' && '${{ github.ref }}' == 'refs/heads/${{ production-branch }}' ]]"
        [[ '${{ github.event_name }}' == 'push' && '${{ github.ref }}' == 'refs/heads/${{ production-branch }}' ]] || exit 0
        echo "Check passed, generating badge"
        data='{"label":"${{ inputs.badge-label }}","color":"${{ inputs.badge-color }}","value":"${{ steps.mineunit-coverage.outputs.total }} in ${{ steps.mineunit-coverage.outputs.files }} files"}'
        curl -v -H "Content-Type: application/json" -d "$data" '${{ inputs.badge-service }}/${{ inputs.badge-name }}'
        echo "Badge URL: ${{ inputs.badge-service }}/${{ inputs.badge-name }}"
